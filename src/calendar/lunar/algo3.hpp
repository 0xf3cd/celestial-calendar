/*
 * CelestialCalendar: 
 *   A C++23-style library that performs astronomical calculations and date conversions among various calendars,
 *   including Gregorian, Lunar, and Chinese Ganzhi calendars.
 * 
 * Copyright (C) 2024 Ningqi Wang (0xf3cd)
 * Email: nq.maigre* @gmail.com
 * Repo : https://github.com/0xf3cd/celestial-calendar
 *  
 * This project is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This project is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this project. If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once

#include <array>
#include <format>

#include "util.hpp"
#include "common.hpp"


namespace calendar::lunar::algo3 {

using namespace calendar::lunar::common;

/** @brief The first supported lunar year. */
constexpr int32_t START_YEAR = 1600;

/** @brief The last supported lunar year. */
constexpr int32_t END_YEAR = 2199;

/** 
 * @brief The encoded binary data for each lunar year. Info for a year is stored in a uint32_t.
 * @ref https://www.hko.gov.hk/sc/gts/time/conversion.htm
 * @ref https://eclipse.gsfc.nasa.gov/SEcat5/deltatpoly.html
 * @details For years from 1901 to 2099, algo1 is used (i.e. Hong Kong Observatory data).
 * @details For other years, algo2 is used to generate the encoded data. (See `algo2.hpp`)
 */
constexpr std::array<uint32_t, (END_YEAR - START_YEAR + 1)> LUNAR_DATA = {
  0x5a0ba4, 0x420b49, 0x2c7a93, 0x520a95, 0x3cf52d, 0x600556, 0x4a0ab5, 0x36d5aa, 0x5c05d2, 0x440da5,
  0x309d4a, 0x560d4a, 0x400a96, 0x28552e, 0x4e0556, 0x38cab5, 0x5e0ad5, 0x4806d2, 0x328ea5, 0x580f25,
  0x44064a, 0x2a6c97, 0x500a9b, 0x3d155a, 0x62056a, 0x4a0b69, 0x36b752, 0x5c0b52, 0x460b25, 0x2e964b,
  0x540a4d, 0x3e04ab, 0x28455b, 0x4c05ad, 0x38eb69, 0x5e0da9, 0x4a0d92, 0x32bd25, 0x580d25, 0x420a55,
  0x2c74ad, 0x5002b6, 0x3b65b5, 0x6006d5, 0x4c0ec9, 0x36be92, 0x5c0e92, 0x460d26, 0x308a56, 0x520a57,
  0x3e04d6, 0x2826d5, 0x4e06d5, 0x38d6c9, 0x5e0749, 0x480693, 0x32b52b, 0x56052b, 0x400a5b, 0x2c755a,
  0x52056a, 0x3b1b65, 0x620ba4, 0x4c0b49, 0x36da95, 0x5a0a95, 0x44052d, 0x2e8aad, 0x540ab5, 0x3e05aa,
  0x284ba5, 0x4e0da5, 0x3afd4a, 0x5e0e4a, 0x480c96, 0x32b52e, 0x580556, 0x400ab5, 0x2c75b2, 0x5206d2,
  0x3d0ea5, 0x600725, 0x4a064b, 0x34cc97, 0x5a0cab, 0x44055a, 0x2e8ad6, 0x540b69, 0x400752, 0x287725,
  0x4e0b25, 0x38fa4b, 0x5e0a4d, 0x4604ab, 0x30a55b, 0x5605ad, 0x420baa, 0x2c7b52, 0x520d92, 0x3cfd25,
  0x620d25, 0x4c0a55, 0x36d4ad, 0x5c04b6, 0x4606b5, 0x308daa, 0x560ec9, 0x420e92, 0x2c7d25, 0x500d26,
  0x3aea56, 0x5e0a5b, 0x4a055a, 0x32a6d5, 0x580755, 0x440749, 0x2e6e93, 0x520693, 0x3d152b, 0x62052b,
  0x4c0a9b, 0x36d55a, 0x5c056a, 0x460b65, 0x32974a, 0x560b4a, 0x400a95, 0x2a552b, 0x50052d, 0x38eaad,
  0x5e0ab5, 0x4a05aa, 0x34aba5, 0x580da5, 0x440d4a, 0x2e9d15, 0x540c96, 0x3d3956, 0x620556, 0x4c0ad5,
  0x38d5b2, 0x5c06d2, 0x460ea5, 0x328e8a, 0x56068b, 0x3e0c97, 0x2a6956, 0x4e055b, 0x3aeada, 0x5e0b6a,
  0x4a0752, 0x34b725, 0x5a0b45, 0x420a8b, 0x2c94ab, 0x5204ad, 0x3d296b, 0x6005b5, 0x4c0baa, 0x38db52,
  0x5e0da2, 0x460d45, 0x30ba8d, 0x560a55, 0x4004ad, 0x2849ad, 0x4e06b5, 0x3aedaa, 0x600eca, 0x4a0ea2,
  0x34bd46, 0x5a0d4a, 0x440a96, 0x2c7536, 0x52055a, 0x3d4ad5, 0x620b65, 0x4c0752, 0x36cea3, 0x5c0695,
  0x46054b, 0x2eaa97, 0x540aab, 0x40055a, 0x2a6ad5, 0x4e0b65, 0x3af752, 0x600b52, 0x4a0b15, 0x32d52b,
  0x58054d, 0x420aad, 0x2e956a, 0x5205b2, 0x3c0ba9, 0x285d52, 0x4e0d8a, 0x36dd15, 0x5c0d26, 0x460956,
  0x308aad, 0x560ad6, 0x4205d4, 0x2c4da9, 0x520ea9, 0x3cce8a, 0x60068b, 0x4a0d27, 0x36a956, 0x58095b,
  0x440ada, 0x3076d4, 0x560754, 0x3e0745, 0x28568b, 0x4e0a93, 0x38d52b, 0x5c04ad, 0x46096d, 0x328b6a,
  0x580baa, 0x420ba4, 0x2c7b45, 0x520d45, 0x3cfa95, 0x600a95, 0x4a052d, 0x34aaad, 0x5a0ab5, 0x440daa,
  0x309da4, 0x560ea2, 0x413d4a, 0x640d4a, 0x4e0a96, 0x38d536, 0x5e055a, 0x460ad5, 0x3296ca, 0x580752,
  0x420ea5, 0x2c6d4a, 0x50054b, 0x3aea97, 0x600aab, 0x4a055a, 0x34ab55, 0x5a0ba9, 0x460752, 0x2e9aa5,
  0x540b25, 0x3f1a4b, 0x64094d, 0x4c0aad, 0x38f56a, 0x5e05b4, 0x480ba9, 0x32bd52, 0x580d92, 0x420d25,
  0x2c7a4d, 0x500956, 0x3b0ab5, 0x600ad6, 0x4c06d4, 0x34ada9, 0x5a0ec9, 0x460e92, 0x308d26, 0x520527,
  0x3d4a57, 0x62095b, 0x4e0b5a, 0x38d6d4, 0x5e0754, 0x480749, 0x32b693, 0x560a93, 0x40052b, 0x2a6a5b,
  0x500a6d, 0x3aeb6a, 0x600daa, 0x4c0ba4, 0x36bb49, 0x5a0d49, 0x440a95, 0x2e952b, 0x54052d, 0x3c0aad,
  0x28556a, 0x4e0daa, 0x3adda4, 0x5e0ea4, 0x480d4a, 0x32ba95, 0x580a96, 0x400556, 0x2a6ab5, 0x500ad5,
  0x3d16d2, 0x620752, 0x4c0ea5, 0x38b64a, 0x5c064b, 0x440a9b, 0x309556, 0x56056a, 0x400b59, 0x2a5752,
  0x500752, 0x3adb25, 0x600b25, 0x480a4b, 0x32b4ab, 0x5802ad, 0x42056b, 0x2c4b69, 0x520da9, 0x3efd92,
  0x640e92, 0x4c0d25, 0x36ba4d, 0x5c0a56, 0x4602b6, 0x2e95b5, 0x5606d4, 0x400ea9, 0x2c5e92, 0x500e92,
  0x3acd26, 0x5e052b, 0x480a57, 0x32b2b6, 0x580b5a, 0x4406d4, 0x2e6ec9, 0x520749, 0x3cf693, 0x620a93,
  0x4c052b, 0x34ca5b, 0x5a0aad, 0x46056a, 0x309b55, 0x560ba4, 0x400b49, 0x2a5a93, 0x500a95, 0x38f52d,
  0x5e0536, 0x480aad, 0x34b5aa, 0x5805b2, 0x420da5, 0x2e7d4a, 0x540d4a, 0x3d0a95, 0x600a97, 0x4c0556,
  0x36cab5, 0x5a0ad5, 0x4606d2, 0x308ea5, 0x560ea5, 0x40064a, 0x286c97, 0x4e0a9b, 0x3af55a, 0x5e056a,
  0x480b69, 0x34b752, 0x5a0b52, 0x420b25, 0x2c964b, 0x520a4b, 0x3d14ab, 0x6002ad, 0x4a056d, 0x36cb69,
  0x5c0da9, 0x460d92, 0x309d25, 0x560d25, 0x415a4d, 0x640a56, 0x4e02b6, 0x38c5b5, 0x5e06d5, 0x480ea9,
  0x34be92, 0x5a0e92, 0x440d26, 0x2c6a56, 0x500a57, 0x3d14d6, 0x62035a, 0x4a06d5, 0x36b6c9, 0x5c0749,
  0x460693, 0x2e952b, 0x54052b, 0x3e0a5b, 0x2a555a, 0x4e056a, 0x38fb55, 0x600ba4, 0x4a0b49, 0x32ba93,
  0x580a95, 0x42052d, 0x2c8aad, 0x500ab5, 0x3d35aa, 0x6205d2, 0x4c0da5, 0x36dd4a, 0x5c0d4a, 0x460c95,
  0x30952e, 0x540556, 0x3e0ab5, 0x2a55b2, 0x5006d2, 0x38cea5, 0x5e0725, 0x48064b, 0x32ac97, 0x560cab,
  0x42055a, 0x2c6ad6, 0x520b69, 0x3d7752, 0x620b52, 0x4c0b25, 0x36da4b, 0x5a0a4b, 0x4404ab, 0x2ea55b,
  0x5405ad, 0x3e0b6a, 0x2a5b52, 0x500d92, 0x3afd25, 0x5e0d25, 0x480a55, 0x32b4ad, 0x5804b6, 0x4005b5,
  0x2c6daa, 0x520ec9, 0x3f1e92, 0x620e92, 0x4c0d26, 0x36ca56, 0x5a0a57, 0x440556, 0x2e86d5, 0x540755,
  0x400749, 0x286e93, 0x4e0693, 0x38f52b, 0x5e052b, 0x460a5b, 0x32b55a, 0x58056a, 0x420b65, 0x2c974a,
  0x520b4a, 0x3d1a95, 0x620a95, 0x4a052d, 0x34caad, 0x5a0ab5, 0x4605aa, 0x2e8ba5, 0x540da5, 0x400d4a,
  0x2a7c95, 0x4e0c96, 0x38f94e, 0x5e0556, 0x480ab5, 0x32b5b2, 0x5806d2, 0x420ea5, 0x2e8e4a, 0x50068b,
  0x3b0c97, 0x6004ab, 0x4a055b, 0x34cad6, 0x5a0b6a, 0x460752, 0x309725, 0x540b45, 0x3e0a8b, 0x28549b,
  0x4e04ab, 0x38e95b, 0x5e05ad, 0x4a0baa, 0x36bb52, 0x5a0d92, 0x440d25, 0x2e9a4b, 0x540a55, 0x3d34ad,
  0x6204b6, 0x4c06b5, 0x38cdaa, 0x5c0ec9, 0x480e92, 0x329d26, 0x580d2a, 0x400a56, 0x2a74b6, 0x500556,
  0x3aead5, 0x5e0b55, 0x4a074a, 0x34ae93, 0x5a0695, 0x42052b, 0x2c8a57, 0x520a9b, 0x3f755a, 0x62056a,
  0x4c0b65, 0x38d74a, 0x5e0b4a, 0x460b15, 0x30b52b, 0x56054d, 0x400aad, 0x2a556a, 0x5005aa, 0x3aeba5,
  0x600da5, 0x4a0d4a, 0x34bd15, 0x5a0d16, 0x44094e, 0x2c8aad, 0x520ad6, 0x3f75b4, 0x6406d2, 0x4c0ea5,
  0x38ce8a, 0x5c068b, 0x460d17, 0x30a956, 0x54095b, 0x400ada, 0x2c76d4, 0x500754, 0x3af745, 0x600b45,
  0x4a0a8b, 0x32d52b, 0x5804ad, 0x42096b, 0x2e8b5a, 0x520daa, 0x3f5b54, 0x640da2, 0x4e0d45, 0x36da95,
  0x5c0a95, 0x46052d, 0x30aaad, 0x540ab5, 0x400daa, 0x2c7da4, 0x520ea2, 0x3afd46, 0x600d4a, 0x4a0a96,
  0x34d536, 0x58055a, 0x420ad5, 0x2e96ca, 0x540752, 0x3c0ea5, 0x284d4a, 0x4c054b, 0x36ca97, 0x5a0aab,
  0x46055a, 0x30aad5, 0x560b65, 0x400752, 0x2a7aa5, 0x500b25, 0x3afa4b, 0x5e094d, 0x480aad, 0x34d56a,
};


/**
 * @brief Calculate the lunar year information for the given year.
 * @attention The input year should be in the range of [START_YEAR, END_YEAR].
 * @param year The Lunar year. 阴历年份。
 * @return The lunar year information. 阴历年信息。
 */
inline auto calc_lunar_year(int32_t year) -> LunarYear {
  if (year < START_YEAR or year > END_YEAR) {
    throw std::out_of_range {
      std::format("year {} is out of range [{}, {}]", year, START_YEAR, END_YEAR)
    };
  }

  return parse_lunar_year(year, LUNAR_DATA[year - START_YEAR]); // NOLINT(cppcoreguidelines-pro-bounds-constant-array-index)
}

/**
 * @brief Same function as `calc_lunar_year`, but cached. 
          与 `calc_lunar_year` 功能相同，但使用缓存。
 * @attention The input year should be in the range of [START_YEAR, END_YEAR].
 * @param year The Lunar year. 阴历年份。
 * @return The lunar year information. 阴历年信息。
 */
const inline auto get_info_for_year = util::cache::cache_func(calc_lunar_year);

/** @brief The bounds of the algorithm, i.e. the supported range of lunar and Gregorian dates. */
const inline auto bounds = calc_bounds(START_YEAR, END_YEAR, get_info_for_year);

} // namespace calendar::lunar::algo3


namespace calendar::lunar::common {

/** @brief Specialize `AlgoMetadata` for `Algo::ALGO_1`. */
template <>
struct AlgoMetadata<Algo::ALGO_3> {
  static const inline auto get_info_for_year = algo3::get_info_for_year;
  static const inline auto bounds = algo3::bounds;
};

} // namespace calendar::lunar::common
