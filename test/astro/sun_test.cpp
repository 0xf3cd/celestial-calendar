#include <gtest/gtest.h>
#include "util.hpp"
#include "astro.hpp"

namespace astro::sun {

TEST(Sun, vsop87d_geocentric_position) {
  // Data was obtained from PyMeeus (https://pypi.org/project/PyMeeus/).
  // PyMeeus is a well-implemented Python library for astronomical calculations.
  //
  // The values are directly obtained thru `Sun.geometric_geocentric_position(Epoch(jd), tofk5=False)`.
  const std::unordered_map<double, std::tuple<double, double, double>> EXPECTED {
    // JD                   Longitude            Latitude                Radius
    { 2428085.9901423827, { 196.24291549533518,  0.00022662535839882144, 0.9984005959453569 } },
    { 2429209.4078447623, {  223.8309485331447,   4.822578568712339e-05, 0.9909417580692218 } },
    {  2429465.433673795, { 117.28912773892807,  -8.076433573496321e-05, 1.0161639974830803 } },
    {  2429953.388331483, { 237.41668423410374, -0.00013425645630215193,  0.987904480066055 } },
    {  2431161.941253818, { 351.74873391491565,   9.978846659875986e-05, 0.9939430162003196 } },
    {  2432014.014810585, {  109.5448873079331,   -6.22418868043172e-05,  1.016534667451186 } },
    {  2433769.181662799, { 41.458131907405914,   3.097632431069461e-05, 1.0079816762240736 } },
    {   2434613.91172212, { 150.92981207286357,  -7.005759487461856e-06, 1.0108180189467295 } },
    {  2441762.579877449, { 0.31948541937890695, -7.596503153416721e-05, 0.9961910336537446 } },
    { 2443374.7807266987, { 146.17998310977782,  -4.929110843875906e-05, 1.0119609244140126 } },
    {          2445701.1, {  280.3662619392999,  1.3856637992645944e-05, 0.9832889892830442 } },
    { 2445969.9636185137, {  183.5452445560486,  0.00010050163885161159,  1.002413328339692 } },
    { 2449860.0893418817, {  61.02738553193922,   9.003127191694163e-05, 1.0123450484640717 } },
    {          2451545.0, {  280.3778436711984,  0.00022721051444223787, 0.9833276819105508 } },
    {          2454359.1, { 172.37619608369778, -0.00010725756446863268, 1.0057018016353796 } },
    {      2454774.36215, {  221.8062247735661, -0.00010196625102869854,  0.991769848723092 } },
    { 2455062.4211865314, { 146.08568059995378,  3.6641485369177606e-05, 1.0121016624152357 } },
    {  2459198.100059211, { 263.06770710484216,  -6.015724059315286e-05, 0.9843086641236005 } },
    {         2460505.25, { 111.82761866574583,  -3.226703118214394e-05, 1.0165107642588653 } },
    {      2462597.96105, {   16.6987939374485,  3.1791715908057304e-05, 1.0006923288119707 } },
    { 2462747.8992810645, {  160.9491737924036,  -7.332138271706535e-05, 1.0087984737625355 } },
    {  2463130.992147824, { 178.31233666900334,   4.186174634066699e-05,  1.004142474248155 } },
    { 2463407.8988365317, {  93.43622083622358,  0.00021429839102153107, 1.0164313092685806 } },
    {          2464080.5, {  37.80127186208301, -0.00012100241309577134, 1.0065840587631982 } },
    {   2465365.92664377, { 221.34049654472074,  1.3458643323877043e-05, 0.9920390254376796 } },
    { 2465749.5972830397, { 239.87597199977245,   8.385767630290122e-05, 0.9878543396348318 } },
    {  2466105.343509812, { 230.30661912650976,  0.00020248361923510725, 0.9898682537752284 } },
    { 2467024.9048040765, {  59.53352685693062,   4.042406107216557e-05, 1.0118636494615723 } },
    { 2470357.3640908827, { 102.85288705550192, -0.00011142515504153264,  1.016717673393774 } },
    {  2471814.858902145, {  99.54784378424665,  0.00021542318051323626,  1.016654597521009 } },
    { 2472631.8702145773, {  182.8040115865806,   0.0002287089773691522, 1.0029796037807306 } },
    { 2477442.9985395926, { 245.57482814075775, -7.2011248239689865e-06, 0.9869016324474648 } },
    { 2477913.6660472676, {  352.4340226130771,   0.0001588328759478606, 0.9936037092460945 } },
    { 2478249.6703224666, {  323.0387462266226, -0.00015339272419597985, 0.9869499155733118 } },
    {  2478862.343878276, { 203.85343904907495,  0.00015608313914733046, 0.9969669344346678 } },
    {  2478992.098383469, {  335.0982080339418, -0.00010672525750105485,  0.989302431496231 } },
    {  2481112.323269161, {  262.7195460476869,  -0.0002945314926932682, 0.9844761123286465 } },
  };

  for (const auto& [jd, expected] : EXPECTED) {
    const auto& [λ, β, r] = vsop87d_geocentric_position(jd);
    ASSERT_NEAR(λ.as<DEG>(), std::get<0>(expected), 1e-10);
    ASSERT_NEAR(β.as<DEG>(), std::get<1>(expected), 1e-10);
    ASSERT_NEAR(r,           std::get<2>(expected), 1e-10);
  }
}

}
