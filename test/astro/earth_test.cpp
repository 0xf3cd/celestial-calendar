#include <gtest/gtest.h>
#include "random.hpp"
#include "julian_day.hpp"
#include "earth.hpp"

namespace astro::earth {

TEST(Earth, vsop87d_heliocentric_position) {
  // Data was obtained from PyMeeus (https://pypi.org/project/PyMeeus/).
  // PyMeeus is a well-implemented Python library for astronomical calculations.
  //
  // The values are directly obtained thru `Earth.geometric_heliocentric_position(Epoch(jd), tofk5=False)`.
  const std::unordered_map<double, std::tuple<double, double, double>> EXPECTED {
    // JD                   Longitude            Latitude                 Radius
    { 2421716.1296036816, { 221.38657723739743,  -4.115227525758551e-05,  1.008090463912895 } },
    { 2422912.8711762577, {  318.1285136051265,  -9.914852042583953e-05,  1.013311807340686 } },
    {   2423642.07626529, { 316.90183977950437,  0.00018984242102971176,  1.013629026593831 } },
    { 2427762.3503392735, {  57.84172705583478, -0.00017592199121776775, 0.9877914715417111 } },
    { 2428967.4165794663, { 168.68654853142652,   6.849943365057851e-05, 0.9931652143755128 } },
    {  2431358.495909215, { 1.8011797502658737,  -0.0001487557951324536,  1.002675351782843 } },
    { 2433182.0229792064, {  359.1684329106647,   6.520403975641616e-06, 1.0034974111802424 } },
    {  2434764.074295689, { 121.00089581218708,  1.1184064082808447e-05, 0.9841389122462156 } },
    { 2435046.7593623144, {  37.29331147589983,   4.222944321901619e-05, 0.9927090169815312 } },
    { 2439481.5212830557, {  89.71342393841405,  0.00013053205103552307, 0.9836791734809575 } },
    { 2440655.2477869145, { 168.75488886400126,  -5.764773170807808e-05,  0.993104457802697 } },
    { 2441797.7565915985, { 214.90030085108992, -0.00016581065782778222, 1.0061580960390424 } },
    { 2444102.1760774567, { 323.20459785160074,   0.0002027188990128626,  1.012575439888013 } },
    {  2444952.569889879, {  81.98730565310416,   4.047485501149525e-05, 0.9842983319531176 } },
    {          2445701.1, { 100.36626193929987, -1.3856637992645944e-05, 0.9832889892830442 } },
    {          2451545.0, { 100.37784367119836, -0.00022721051444223787, 0.9833276819105508 } },
    {          2454359.1, {  352.3761960836978,  0.00010725756446863268, 1.0057018016353796 } },
    {      2454774.36215, {   41.8062247735661,  0.00010196625102869854,  0.991769848723092 } },
    { 2454999.9655851964, { 266.39729632727995, -0.00013599830496268542,  1.015983142942533 } },
    {   2455388.84525163, { 288.94440860623035,  -4.980835488833103e-05,  1.016634587783607 } },
    { 2455914.4367720224, {  86.64757585498046,   5.131624130677439e-05, 0.9839735760324848 } },
    {  2456143.345232291, {   311.879423569615,  -6.730536081341476e-05, 1.0145537359065666 } },
    {  2458188.101095128, { 169.96610473337842,   -9.87338662803703e-05, 0.9931937387596217 } },
    {         2460505.25, { 291.82761866574583,   3.226703118214394e-05, 1.0165107642588653 } },
    {  2461494.483947319, { 189.05186432152368,  0.00012459973264808085,    0.9984558144491 } },
    {      2462597.96105, {  196.6987939374485, -3.1791715908057304e-05, 1.0006923288119707 } },
    { 2463634.3736982383, { 137.38066537538543,   0.0001610434589814602, 0.9860327068303001 } },
    {          2464080.5, {   217.801271862083,  0.00012100241309577134, 1.0065840587631982 } },
    {  2467045.736127866, {  259.5121907287303,  0.00016932117371819497,  1.015164815553697 } },
    {  2468356.479543585, {  110.8878258386103,  -1.479518960106849e-05,  0.983468272403578 } },
    { 2469150.4664363284, { 175.04847168099514, -0.00014129726815689347, 0.9944371569907081 } },
    {  2469266.635945361, { 287.61533414099904,   -9.56689246254318e-06, 1.0166829268123343 } },
    {   2470210.48592792, {  139.1445159854884,  -0.0001577964866666292, 0.9863022963251856 } },
    {  2470800.744066477, {  357.9910055541477,   9.838834579594222e-05, 1.0042919301532383 } },
    { 2474291.9953455296, { 202.87187222890134, -0.00017024632115228845, 1.0023192805324896 } },
    {  2475915.780080406, {  359.6033330549981,  0.00010299206401811968, 1.0039472643099783 } },
    { 2479702.9079045844, { 135.20872608030186,  -8.875324753265642e-05,  0.985635590335806 } },
  };

  for (const auto& [jd, expected] : EXPECTED) {
    const auto& [λ, β, r] = vsop87d_heliocentric_position(jd);
    ASSERT_NEAR(λ.as<DEG>(), std::get<0>(expected), 1e-10);
    ASSERT_NEAR(β.as<DEG>(), std::get<1>(expected), 1e-10);
    ASSERT_NEAR(r,           std::get<2>(expected), 1e-10);
  }
}

}
